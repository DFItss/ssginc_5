회원가입
1. 구글
2. github
3. 오라클
   www.oracle.com


JDK 다운로드
java.oracle.com
(https://www.oracle.com/java/technologies/)


java 개발 환경 3가지 ( 기준: 디바이스:장치)

1) Java SE ( Java Standard Edition)
   - 일반 PC
   - Java 기술
   - JDK 설치함으로 구축 가능

2) Java EE ( Java Enterprise Edition)
   - 웹서버 ( Tomcat 9 )
    예> 웹 페이지 개발
   - 서블릿,JSP
   - Tomcat 설치함으로 구축 가능

3) Java ME ( Java Micro Edition)
   - 휴대용 장치
    

JDK(Java Development Kit) 설치
기본설치폴더(JDK홈디렉터리):
C:\Program Files\Java\jdk-11

환경변수 설정
시작오른쪽클릭> 시스템 > 고급 시스템 설정 > 환경변수 > 시스템 변수
# JAVA_HOME용도: JDK홈디렉터리 지정
JAVA_HOME=C:\Program Files\Java\jdk-11

# path용도: 명령어 경로 지정
javac.exe  java.exe 
PATH=C:\Program Files\Java\jdk-11;값2;값3


자바에서 사용되는 압축 형식 3가지
1) jar
  - *.class 파일들이 압축된 형식
  예> *.jar

2) war
  - 서블릿/jsp로 만든 웹 어플리케이션 압축된 형식
  예> *.war
 
3) ear
  - jar + war ===> ear로 압축
   예> *.ear


eclipse 개발 도구 ( IDE 툴 )
- 인텔리제이
  www.jetbrains.com
- VSC

www.eclipse.org

download > Download Packages
주의할점 2가지
1) JDK 버전 확인
2) SE 환경 개발?
     - 비웹개발
     Eclipse IDE for Java Developers

   EE 환경 개발?
     - 웹개발
     Eclipse IDE for Enterprise Java and Web Developers

eclipse 설치후 설정

window > preference > 
general > workspace 
> text file encoding 값을 utf-8로 설정.
==> utf-8로 설정해야 한글사용이 가능

window > preference > 
general > Appearance > Colors and Fonts 
> Basic  > Text Font
==> 글꼴설정

window > preference > Java
> Installed JREs

==> eclipse에 내장된 openjdk 대신에
   우리가 설치한 jdk11 사용하도록 변경하자.
###########################################
프로젝트 생성
File > New  > Java Project 선택 

Project Name 지정,
JRE는 JavaSE-11 설정,
Module는 체크 해제하기.

#############################
API의 메뉴얼 제공: API문서 ( API documentation)
https://docs.oracle.com/en/java/javase/11/docs/api/java.base/module-summary.html

#######################
소스파일 작성 ( *.java )

1) 클래스 이름지정 방법
   - 반드시 첫글자는 영문자 또는 _ 또는 $ 만 가능
     이후에 숫자지정 가능.

   - 대소문자 구별

   - 클래스는 첫글자는 반드시 대문자로 지정 ( 관례 )

   - 특수문자는 2개만 가능 ( _, $ )

   - 단어간 공백문자 불가


2) public static  void main( String [] args ) 필수
 ==> 반드시 위 코드 형식으로 지정해야 된다.
 ==> main 메서드라고 부른다.
 ==> 실행하기 위한 시작점(starting point ) 역할이다.

# 생성된 소스
public class Hello {

	public static void main(String[] args) {

	}
}

==> 클래스명(Hello)과 파일명(Hello.java)이 일치해야 된다.
==> 대소문자 구별
==> 클래스 갯수는 3개 
     Hello: 개발자가 만든 클래스
     String: API
     System: API


==> Hello.java 소스파일 작성
        |     컴파일, 컴파일러( javac.exe ), eclipse가 자동으로 해줌.
    Hello.class (byte code, package explore에서는 안보임. navigator에서 보임 )
        |     실행, 인터프리터 ( java.exe )
       결과   ( 콘솔(console)에 결과값이 출력됨 )	    



######################################################
이클립스 단축키
1. 한줄 삭제
    ctrl + d

2. 줄 바꿈
    alt + 화살표키

3. 한줄 복사
   ctrl + alt + 화살표키

4. 명령어 취소
   ctrl + z

5. 파일저장
   ctrl + s

6. 콘솔 출력
   sysout하고 ctrl + spacebar

7. 한줄 주석
   //  , ctrl + / ( 토글 )

8. 여러줄 주석
   /*
       , ctrl + shift +  /
   */

######################################################
식별자 ( identifier )
1. 개념:
    자바소스의 단어 의미

2. 문법
   - 첫글자는 반드시 영문자 또는 특수문자( _, $)
     이후에 숫자지정 가능
   - 대소문자 구별함.
   - 한글지정 가능. (권장안함)

3. 대상 3가지

  1) 클래스
     - 첫글자는 반드시 대문자
     - 권장은 명사형 

  2) 변수
     - 소문자
     - 권장은 명사형

  3) 메서드
     - 소문자
     - 권장은 동사형

4. 식별자 종류 2가지 ( 기준은 주체 )

  가. API
     - 이름이 정해져 있음 ( 예약어, 키워드 )
     - 시스템 정의 식별자
     예> String, System, static, void, public, class
         println, interface, abstract, protected, private,
	 final, transient, default, switch, if, for,..........

  나. 개발자(사용자)
     - 사용자 정의 식별자
     예> args, Hello
     - 반드시 예약어는 제외하고 지정해야 된다. (***********)

==> 나머지 연산자(operator)와 값(데이터,리터럴:literal)으로 구성됨.
   리터럴 형식
   :  "홍길동"
      '남'
      35
      true
      183.45


  ##############################
  () : 소괄호
  {} : 중괄호
  [] : 대괄호
  #########################################################
자바의 데이터 종류 ( 데이터형, data type ) ===> 무조건 외우기
==> 자바언어가 인식 가능한 데이터 종류가 무엇인지 살펴보자.

  가. 기본형 데이터형 ( Primitive Data Type: PDT )
  
      - 수치형 --- 정수 :   byte (  1byte )
                         short ( 2byte )
			 int   ( 4byte ) : 기본
			 long  ( 8byte )
                   - 10진수, 2진수, 8진수, 16진수 모두 사용 가능
                    예>  10진수: 100, -30, 0
                        2진수: 0|1 이용 ( 0b값 )
		             0b1, 0b0
                        8진수: 0~7 이용 ( 0값 )
			      01, 02,...07
                        16진수: 0~9, A,B,C,D,E,F 이용 ( 0x값)
			      0x0, 0x1,..... 0xF
			       

             ---- 실수 :  float ( 4byte )
	                 double ( 8byte ) : 기본
                         - 소수점이용, 지수표현 가능
		 예>  3.14 ( 3.14D, 3.14d ) ===> double로 처리됨

			   3.14F ( 3.14f)  ====> float로 처리됨


      - 문자형 -- char ( 2byte, 캐릭터라고 읽음 )
                   -자바는 전세계의 모든 글자 표현 가능 (한글포함)
                   -이스케이프 문자(escape) 지정 가능
		     예> \t ( tab 클릭효과 얻음) 
		        \n  ( enter 효과 얻음 )
			\"  ( " 출력 )
			\'  ( ' 출력 )
			\\  ( \ 출력 )

	           - 단 하나의 문자 표현식에  사용됨.
		     반드시 '' (홑따옴표)로 감싸야 된다.
		     예>  '남',  '여' ,  'A', 'B'
                  
		  * 문자열은 참조형이다.
                   ==> 문자열은 문자가 여러개
		   ==> 반드시 "" (쌍따옴표)로 감싸야 된다.
		   예> "홍길동", "서울"
		   ==> String 클래스 타입으로 관리됨
		   
      - 논리형 : boolean ( 1byte, 불린 라고 읽음 )
                 - 참/거짓 표현
		   참은 true 표현되고
		   거짓은 false(기본) 표현됨.

  ====> 기본형 데이터 갯수는 8개이다.

  나. 참조형 데이터형 ( Reference Data Type: RDT )
     - 기본형 8개 제외한 나머지가 모두 참조형이다.
     - 대표적으로 클래스, 인터페이스, 배열이다. (****************)
############################################################################
###### 참고할만한 사이트 소개 ##############################################
############################################################################
# 자바 소개 및 특징
https://velog.io/@kojam9041/Java-%EC%9E%90%EB%B0%94-%EC%86%8C%EA%B0%9C-%EB%B0%8F-%ED%8A%B9%EC%A7%95
https://s-bug.tistory.com/57

# 진법 관련 짧은 동영상 
2진수, 8진수, 10진수, 16진수 변환 공부 하실 때 참고
https://www.youtube.com/watch?v=y26oXFInsoI
https://www.youtube.com/shorts/WJo3bZlbHwg
https://www.youtube.com/shorts/dTT_cQrIQJk
https://www.youtube.com/shorts/JonWf0occWw
https://www.youtube.com/shorts/GyOZc9lY_BM
https://www.youtube.com/shorts/lm3Z4ALBHXY
https://www.youtube.com/shorts/FQGLS10uYOk
https://www.youtube.com/shorts/AY5CECThfZ0

# 자바 데이터 타입, 변수, 리터럴 
https://catsbi.oopy.io/6541026f-1e19-4117-8fef-aea145e4fc1b
############################################################################
############################################################################


Hello.java ( 소스파일, 영단어로 구성, 자바인식 불가 )
  |
  |  <=== 자바가 인식가능한 코드로 변경해야 된다.
  |       컴파일 한다고 한다.
  |
Hello.class (byte code, 자바인식이 가능)
##############################################################
1일차 리뷰

1. 자바 3가지 환경
  - Java SE: 기본개발 환경, JDK 설치(2개의 환경변수: JAVA_HOME, PATH )
  - Java EE: 웹 개발 환경 ( 서블릿/jsp ), Tomcat설치
  - Java ME: 모바일 환경

2. 자바 특징
  - 플랫폼(OS)에 독립적==> 생성된 class 파일을 어떤 OS에서도 그냥 실행이 가능하다.
  - 객체지향 프로그래밍(Object Oriented Programming: OOP )

3. 자바 프로그램 개발 순서

   1) 소스작성 ( Hello.java )
      - 개발자가 이해할 수 있는 영단어 코드로 구성
   
   2) 컴파일 단계 ( javac.exe 컴파일러 이용 )
       Hello.java ----------> Hello.class ( bytecode )
      
      문법: javac  Hello.java

   3) 실행 단계 ( java.exe 인터프리터 이용 )
      Hello.class ----------------> 결과값 출력

      문법: java  Hello

4. JVM ( Java Virtual Machine)
  - 역할: bytecode인 class 실행시킴
  - JDK설치하면 JVM이 구축됨
  - S/W이지만 H/W 특징을 가짐 ( 다양한 메모리 포함 )
    주요 메모리: stack, heap, method area

5. 자바에서 사용 가능한 데이터 종류 ( ***************** )

   가. 기본형 데이터 ( 데이터종류, data type )
      - Primitive Data Type: PDT
      - 종류:
               수치형  - 정수형 : byte  (1byte)
	                       short (2byte)
			       int   (4byte): 기본
			       long  (8byte)
			      
			      정수값(리터럴)표현: 10진수, 2진수(0|1), 8진수(0~7), 
			                      16진수(0~9,A,B,C,D,E,F) 모두 사용 가능
                                         예>   10    0b값   0값   0x값
			      만약에 100 정수를 쓰면 기본인 int로 처리가  된다. 	
			      long으로 처리하고 싶으면 100L 지정한다.
					 
	                실수형 : float (4byte) 
                               double (8byte): 기본
                              실수값(리터럴)표현: 소수점이용, 지수표현 가능
			           예>  31.4, 31.4D   ===> double 처리
				       31.4F  ==> float 처리


	       문자형          : char(2byte)
                               -문자형(리터럴)표현: 반드시 '' 사용
			        예> 'A', '남'
                               - escape 문자 ( \t, \n, \\, \', \" )
			       - 전세계의 모든 문자 표현 가능

	       논리형          : boolean (1byte)
                                논리형(리터럴)표현:   true, false


   나. 참조형 데이터 
      - Reference Data Type: RDT
      - 기본형 8개 제외한 나머지 모두
       대표적: 클래스, 인터페이스, 배열
##############################################################################
2일차

1. 정수에서 long 타입으로 사용할 때는 다음과 같이 정수값L 지정한다.
  예> 300L

2. 기본형 8개에 해당되는 클래스 8개를 제공한다.

 기본형          참조형(클래스) ==> wrapper 클래스라고 부른다.
 ----------------------------
 byte		Byte
 short		Short
 int		Integer
 long		Long

 float		Float
 double		Double

 char		Character
 boolean        Boolean


#################################################
3. 변수 ( variable )

  1) 용도
    - 데이터 저장 ( 기본형 데이터 및 참조형 데이터 저장용도 )
    - 언제든지 값이 변경될 수 있음.

  2)사용방법 3단계
    (1) 변수선언
        - 데이터가 저장된 영역 확보 작업 ( 메모리에 저장되고 메모리 위치에 해당되는 이름 지정)
	- 문법:

	    데이터타입 변수명;
         예>  int num;      // int 때문에 4byte 영역확보
	     String name;  // String 참조형이기 때문에 4byte 영역확보

    (2) 변수초기화
        - 생성된 변수에 처음 값을 저장하는 작업
        - 문법:
	     변수명=값;

         예>  num = 19;
	     name = "홍길동";

    (3) 변수 사용
       System.out.println(num);  // 19
       System.out.println(name);


     (4) 변수값 변경
        num=29;
        System.out.println(num);  // 29


4. 기본형 변수 vs 참조형 변수

  1) 기본형 변수
    - 기본형 데이터를 저장하는 변수
    예> 
        int num;   // 실제값이 저장
	num = 20;
    
    ==> num 변수안에 20이 저장됨.

  2) 참조형 변수
    - 참조형 데이터를 저장하는 변수
   
   예>
       String name;  // 주소값이 저장
       name ="홍길동";

   ==> name 변수 안에 "홍길동"이 저장된 주소값이 저장됨.

5. 변수 종류 ( **************************)
  - 변수 선언 위치와 용도에 따른 분류

  가. 로컬 변수 ( local variable )
      - 메서드안에서 선언
      - 생성시점: 메서드 호출시 변수생성됨 
        제거시점: 메서드 호출후 작업이 모두 끝났을 때
      - 생성횟수: 메서드 호출할때마다 매번 생성되고 
                메서드 작업이 끝나면 매번 삭제됨. ( 일시적으로 사용할 목적으로 주로 사용됨 )
      - 저장메모리: stack 메모리
      - 선언만하고 초기화하지 않으면 자동초기화 안됨.
        반드시 사용전에 초기화해야 된다. (******************)
  나. 인스턴스 변수 ( instance variable )
      - 메서드 밖에서 선언
      - 생성시점: 클래스 객체 생성(new 키워드 이용)시 변수생성됨 
        제거시점: 클래스 객체가 제거될 때 변수가 삭제됨.
          ==> 개발자가 클래스를 사용하기 위해서 new 이용한다. ( 클래스 영역 확보 )
	      사용된 클래스 영역을 제거는 개발자가 하지 않고 자바가 자동으로 제거해준다.
	      제거해주는 프로세스는 GC ( Garbage Collector)가 해준다.
	  ==> C 언어는 영역 확보 및 제거를 개발자가 모두 직접 해야된다.
      - 생성횟수: new 할때마다 매번 생성.
      - 저장메모리: heap 메모리
      - 선언만하고 초기화하지 않으면 자동으로 기본값으로 초기화된다.
        기본형:
	    정수: 0
	    실수: 0.0
	    문자: \u0000
	    논리: false
	참조형: null
  다. 클래스 변수 ( class variable, static variable)
      - 메서드 밖에서 선언 + static 키워드 추가
      - 생성시점: 프로그램 실행시 변수 생성됨 
        제거시점: 프로그램 종료시 변수가 삭제됨.
      - 생성횟수: 1 번
      - 저장메모리: method area 메모리  
      - 선언만하고 초기화하지 않으면 자동으로 기본값으로 초기화된다.
        기본형:
	    정수: 0
	    실수: 0.0
	    문자: \u0000
	    논리: false

	참조형: null
	  
