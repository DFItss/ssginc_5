MyBatis 프레임워크

1. 개요
 - JDBC 사용을 편리하고 효율적으로 기능이 추가된 형태의 SQL Mapping Framework 프레임워크.
 - ibatis ( OLD 버전 )

2. 홈페이지에 가서 필요한 jar 다운로드 하자.
  http://mybatis.org

  1) mybatis-3.5.14 선택
  2) assets
     mybatis-3.5.14.zip 다운

  3) 압축풀기
    mybatis-3.5.14.jar ( build path 대상임)
    mybatis-3.5.14.pdf ( 메뉴얼, https://mybatis.org/mybatis-3/ )

3. 이클립스에서 build path
   1) 프로젝트 생성
   2) 2개의 jar 파일 build path
     - mysql-connector-j-8.jar  ( mysql 드라이버 )
     - mybatis-3.5.14.jar

    
     - 자바프로젝트 선택 > 오른쪽 클릭 > build path > configure build path > 3번째 탭 libraries > 
       classpath 선택하고 오른쪽 항목에서  Add External jars.. 클릭 >
        mysql-connector-j-8.3.0.jar 와 mybatis-3.5.14.jar 선택


4. MyBatis 사용방법

   1)  JDBC에서 사용했던 4가지 정보를 외부파일에 저장.
       => jdbc.properties
       => src 폴더에 저장. ( 패키지 설정 가능 )

     * properties 에 저장하는 형식
      key=value
      key=value

     jdbc.driver=com.mysql.cj.jdbc.Driver
     jdbc.url=jdbc:mysql://localhost:3306/testdb
     jdbc.userid=root
     jdbc.passwd=1234

   2) 최소 2개의 xml 파일이 필요
     ==> *.xml 
     => src 폴더에 저장. ( 패키지 설정 가능 )

      가. 설정 파일
      https://mybatis.org/mybatis-3/getting-started.html#building-sqlsessionfactory-from-xml
        - 용도: mybatis 사용시 환경설정 정보들 관리( DB연동정보, DTO별칭, mapper 등록)
        - Configuration.xml
        

      나. mapper 파일
      https://mybatis.org/mybatis-3/getting-started.html#exploring-mapped-sql-statements
        - 용도: JDBC에서 사용했던 SQL문을 저장하는 파일.
	- 테이블당 하나씩 작성. ( 테이블명Mapper.xml )
	- DeptMapper.xml
	  EmpMapper.xml

     *  Configuration.xml 파일을 읽는 자바코드가 필요.
      ==> com.config.MySqlSessionFactory.java 만들고 복사해서 사용.

     public class MySqlSessionFactory {
  
	static SqlSessionFactory sqlSessionFactory;
	static {
		String resource = "com/config/Configuration.xml";
		  InputStream inputStream=null;
		try {
			inputStream = Resources.getResourceAsStream(resource);
		} catch (IOException e) {
			e.printStackTrace();
		}
sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	}//end static 블럭
	
	// SqlSessionFactory 로부터 SqlSession 얻는 메서드
	public static SqlSession getSession() {
		// MyBatis는 명시적으로 commit 지정해야 된다.
		SqlSession session = sqlSessionFactory.openSession(); // openSession(false) 동일
		return session;
	}
	

    * JDBC vs MyBatis

      가. JDBC에서 필요한 API

          - Connection
	  - PreparedStatement
	  - ResultSet

      나. MyBatis에서 필요한 API

          - SqlSessionFactory
	  - SqlSession (***********)
	   ==> SqlSession session  = MySqlSessionFactory.getSession();


    * SqlSession의 메서드	  
     ==> DeptMapper.xml 에 있는 태그를 호출하는 메서드

      가. select 작업
	  # 단일 레코드 반환
	  DeptDTO dto = session.selectOne("mapper의 id값");
          DeptDTO dto = session.selectOne("mapper의 id값", Object obj); // obj는 where절에 사용

	  # 다중 레코드 반환
	  List<DeptDTO> list = session.selectList("mapper의 id값");
          List<DeptDTO> list = session.selectList("mapper의 id값", Object obj); // obj는 where절에 사용

      나. insert 작업
	  int n = session.insert("mapper의 id값");
          int n = session.insert("mapper의 id값", Object obj); // obj는 저장할 데이터

      다. update 작업
          int n = session.update("mapper의 id값");
          int n = session.update("mapper의 id값", Object obj); // obj는 수정할 데이터

      라. delete 작업

          int n = session.delete("mapper의 id값");
          int n = session.delete("mapper의 id값", Object obj); // obj는 삭제할 데이터


   3) 하나의 레코드를 저장하는 DTO 작성 (******)
     ==> select 된 결과인 레코드를 자동으로 DTO에 저장한다.
         단, 연결고리가 존재한다. 
	    테이블의 컬럼명(원칙은 컬럼헤더값)과 DTO의 변수명이 일치해야 된다.

	 예>
	     create table dept
	     ( deptno INT PRIMARY KEY,
	       dname  VARCHAR(20),
	       loc    VARCHAR(20) );

	     select deptno as no, dname, loc -- int deptno에 저장 안됨.
	     from dept;

	    public class DeptDTO{

               int deptno;
	       String dname;
	       String loc;

