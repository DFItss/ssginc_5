
MySQL 강좌정리

0. 참조할 문서

  오라클: https://docs.oracle.com/en/database/oracle/oracle-database/23/sqlrf/index.html#Oracle%C2%AE-Database

  mysql:  https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/

1. 환경설정
 
  1) MySQL8 다운 및 설치
    - 커뮤니티 버전 ( 무료 )
    - https://dev.mysql.com/downloads/installer/
   
    - Windows (x86, 32-bit), MSI Installer	8.0.36	285.3M	


   
  2) 접속툴
    - 자체적으로 설치: workbench ( GUI )
                   command line client ( CMD )

    - 다운로드 설치: DBeaver.zip
                 ==> http://dbeaver.io/download
                  Toad
		  ...

   3) 프로그램 언어(자바)
      - JDBC( Java DataBase Connectivity) 기술이용
      - JDBC 특징: DB 종류와 무관하게 연동 가능.
                  Java SE 및 Java EE(웹) 무관하게 사용 가능.
	     단점: SQLException이 발생됨.( 무조건 try~cacth 필요)


    4) 실습에서 사용할 Database 생성 및 테이블 생성
       Database 명: testdb
       테이블: 
               - 수업때 사용할 테이블: scott_mysql.sql 이용
	                          dept 테이블
				  emp 테이블
				  salgrade 테이블

	       - 워크샵 진행시 사용할 테이블 :  MySQL용_SQL워크샵스크립트.txt
	                             tb_class
				     tb_class_professor
				     tb_department
				     tb_grade
				     tb_professor
				     tb_student

2. 데이터베이스 vs 데이터베이스 관리 시스템

 1) 데이터베이스(DataBase : DB)
   - 개인,회사,관공서등에서 업무적으로 필요한 데이터 의미.
 
 2) 데이터베이스 관리 시스템 ( DataBase Management System : DBMS )
   - DataBase(데이터)를 전문적으로 관리해주는 S/W 의미.
   - 관리 방법? 보안
              CRUD ( Create: 데이터 생성
	             Read  : 데이터 조회
		     Update: 데이터 수정
		     Delete: 데이터 삭제 )
	     사용자 생성
	     Role 부여
	     ...

    - 데이터 저장 방법? 계층형 데이터베이스
                    망형   데이터베이스
		    객체지향 데이터베이스
		    관계형 데이터베이스 (*): 행(레코드)과 열(컬럼)로 구성된 2차원 테이블형식으로 관리
		    ..
      
3) 관계형 데이터베이스 (Relational DataBase : RDB) 
          <=====> NoSQL ( Not only SQL ):{key:value}, 비정형 예> MongoDB, Casandra,....
       
  가. 개념
    행(레코드)과 열(컬럼)로 구성된 2차원 테이블형식으로 관리
   
  나. 종류
    - Oracle
    - MySQL ( MariaDB 는 MySQL 문법이 거의 99% 비슷)
    - MSSQL
    - DB2
    ...

3. SQL (Structured Query Language )

 1) 개요
  - RDB 에서 사용하는 프로그램 언어이다.
  - 대소문 구별 안함. ( 식별자 의미 ) ==> mysql에서는 리터럴(값)도 대소문자 구별안함. oracle은 대소문자 구별함.
  - 연산자
  - 조건문
  - 함수 ( 자바의 메서드 역할 )

 2) 종류 1

    가. ANSI SQL
      - 표준화된 SQL 의미.
      - DBMS에 독립적 ==> 모든 DBMS에서 사용 가능(Oracle, MySQL, ... )


    나. 비 ANSI SQL
      - 표준화되지 않은 SQL 의미.
      - DBMS에 의존적 ==> MySQL에서만 사용가능한 문법이 있다는 의미.

 3) 종류 2 ( 역할 )

   가. 조회 ==> query 라고 부름.
     - select 문 이용

   나. 레코드-생성/수정/삭제 ==> DML(Data Manipulation Language: 데이터 조작어) 라고 부른다.
     - 레코드 생성: insert 문
     - 레코드 수정: update 문
     - 레코드 삭제: delete 문

   다. 테이블(객체:인덱스,뷰,프로시저,사용자)-생성/수정/삭제 ==> DDL ( Data Definition Language: 데이터 정의어 ) 라고 부른다.
     - 테이블 생성: create 문
     - 테이블 수정: alter  문
     - 테이블 삭제: drop 문

   라. 트랜잭션 명령어   ==> TCL( Transaction Control Language ) 라고 부른다.
      - DML과 매우 밀접한 관련있음.
      - commit 문
      - rollback 문

   마. etc
      - 사용자생성/권한부여/권한취소 ...


4. select 문

  1) 기능 3가지
   
   - selection: 행 선택
   - projection: 열 선택
   - join(연결): 2 개 이상의 테이블 연결해서 selection 및 projection 처리.

  2) 문법
    
    select 절
    from 절; ( mysql 생략 가능, Oracle 생략  불가 )
    ========> 항상 테이블의 모든 레코드 대상이다.
              따라서 emp는 항상 14개가 반환된다.

    - select 절: * (모든컬럼,all)
                컬럼명,컬럼명2,...
		컬럼명+10  ==> 연산가능
		컬럼명 as 별칭 ==> 가독성, "별칭"
		리터럴(값)
		함수명(컬럼명)  ==> 함수가능
		distinct 컬럼명 ==> 중복 제거
    
    - from 절;  테이블 명

  
  3) sql문에서 "" 와 '' 사용  ( ANSI )
    - "" 는 별칭에서만 사용하자.
    - '' 는 문자(열)값, 날짜값 ==> 리터럴(literal)
     예>  'hello', 'a'
          '2024-03-28'
       
      
  4) null 값
   
    가. 정의?
       - 테이블의 컬럼에 값이 없는 것.( 값 없음을 의미 )
         select 하면 비워져서 보여짐.
   
    나. 특징
       - 기본적으로 테이블의 모든 컬럼은 null 값을 가질 수 있다.
         강제적으로 null이 아닌 값을 가지도록 할 수 있다. ( not null 제약조건  이용 )

       - null 값 조회는  is null 연산자를 사용해야 된다. ( 부정: is not null )
       - null 값의 연산결과는 null 값이 반환된다. (******)

         예> 사원의 연봉 ?
	    sal*12 ==> (sal*12) + comm 가 null 값이 나오는 사원도 있다.

         컬럼값이 null 인경우에는 연산 가능하도록 null값을 임의의 값으로 변경하는 함수가 필요.
	   
	- ifnull(컬럼명, 기본값) ( Oracle 에서는 NVL(컬럼명, 기본값) )
	   ==> (sal*12) + ifnull(comm, 0)

        - null 값은 가장 작은 값으로 처리한다. ( Oracle에서는 가장 큰 값으로 처리 )

	- 기본인 null 허용 ---------------> not null 제약조건으로 허용 불가 ( 변경작업 )

	 
5. select 문 + 조건지정

  1) 문법:
   
     select 절
     from 절
     where 절;

 예> select *|컬럼명,컬럼명|컬럼명 as "별칭"|컬럼명+10|함수(컬럼명)|distinct 컬럼명|리터럴값  , projection기능
    from 테이블명 
    where 조건식;  // 조건식에 일치하는 레코드만 출력됨. selection 기능

  2) 조건식에 사용되는 연산자

   가. 비교연산자 1
     
      =   : 같냐? ( 자바에서는 == 사용됨 )
      !=  : 같지 않냐?
      >   : 크냐?
      >=  : 크거나 같냐?
      <   : 작냐?
      <=  : 작거나 같냐?

     ==> 수치, 날짜, 문자도 사용 가능
     ==> 날짜는 내부적으로 수치형으로 관리

         기준시간: 1970-01-01  ------------------------> 현재

   나. 비교 연산자 2
      범위로 조회

     - Between A and B: A 부터 B 까지 포함된 레코드 반환.
                       A와 B 포함됨.
     - 수치, 날짜, 문자도 사용 가능
                      

   다. 비교연산자 3
      한꺼번에 여러개 지정

      - IN (값, 값2, 값3)  : 값 또는 값2 또는 값3
      - 수치, 날짜, 문자도 사용 가능

   
   라. like 연산자
      - 패턴으로 조회 가능

     * 2개의 와일드카드 문자와 같이 사용 ==> 특정문자(들)와 치환이 된다.

      % : 없거나 여러개 치환 가능
        예> where ename LIKE '%A';   // A로 끝나는
           where ename LIKE 'A%';   // A로 시작는
           where ename LIKE '%A%';   // A가 포함되는
     
      _ : 반드시 하나의 문자와 치환
        예> where ename LIKE '__A';  // 3글자면서 A로 끝나는

      %와 _ 혼합 사용 가능:
        예> where ename LIKE '_A%';  // 두번째 글자가 A로 시작하는

     * 산술연산자에서 % 가능하지만 MOD() 권장함.

      - % 나 _ 를 포함하는 이름을 찾을  수 있다.

      예> ename
         ------
	 AAA_BBB
	 AAA%BBB
	 _XXXYYY

	==> ename LIKE '%\_%';   // \뒤에 오는 와일드카드 문자를 그냥 일반문자로 처리함. ( oracle 불가 )

        ==> ename LIKE '%$_%' ESCAPE '$'; // 임의의 문자 뒤에 오는 와일드카드 문자를 그냥 일반문자로 처리함.
	                                     ( oracle 가능 )
 

   마. null 조회
    
     - IS NULL 사용



   바. 정렬
     => 기본적으로 테이블내에 저장되는 데이터는 정렬이 안된 상태이다.
      
     - 정렬방법
       오름차순(기본) :  asc|ASC
       내림차순      :  desc|DESC

     - 문법

        select 컬럼명 as A, 컬럼명2 as B
	from 테이블명
	where 조건식(연산자)
	order by 표현식(컬럼명|별칭|select절지정된위치1부터)  ASC|DESC   ;
    
     - 다중정렬

        order by 표현식1,  표현식2;

      예> order by sal desc, empono; ==> sal로 정렬하고 같은 sal들만 뽑아서 다시 empno로 재정렬함.
         order by 별칭 desc, 별칭;
	 order by 1 desc, 3;

   정리
        select     3번: 지정된 컬럼만 선택
	from       1번 : 14개의 레코드
	where      2번 : 조건에 의한 필터링, 10개 추출됨
	order by   4번: 지정된 정렬로 출력됨.

####################################################################
2일차 ( 3월 29 일 )

1. 함수(function)

  1) 역할: 데이터 가공처리
  2) 종류:

      가. 단일행 함수 ( single row function )
         - 테이블의 행(레코드) 단위로 적용되는 함수 의미.
         - 데이터별 종류
	   a. 문자데이터
	      - 길이,부분열,대문자,소문자,공백제거,...
	   b. 수치데이터
	      - 반올림, 절삭, 부호식별,절대값,...
	   c. 날짜 ( Oracle 함수와 완전히 다르다.)
	      - 현재날짜,시간, 연산, 특정날짜추출(년도,월,시간,...)
           
	   d. 변환함수
	      - 숫자==> 문자, 문자==> 숫자
	        날짜==>문자 , 문자==>날짜

		 숫자 <----> 문자 <----->날짜

	   e. etc
	      - ifnull, case, if

      나. 그룹 함수 ( group function)
         - 테이블의 그룹 단위로 적용되는 함수 의미
	  예> 부서별, 성별
         - 총합,평균,최대,최소,갯수
	   sum(), avg(), max(), min(), count()
	 
2. 단일행 함수: 문자데이터
https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/string-functions.html
   - upper()
   - lower()
   - length()
   - substr(), substring(), left(), right()
   - lpad(), rpad()
   - ltrim(), rtrim(), trim()
   - concat(n,n2,..)
   - concat_ws(구분자,n,n2,.)
   - format()
   - instr()
   - replace()
   - space(n)
   - repeat()
   - reverse()

3. 단일행 함수: 수치데이터
https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/numeric-functions.html
   - round
   - truncate
   - ceil
   - floor
   - sign
   - mod
   - abs
 
4. 단일행 함수: 날짜데이터
https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/date-and-time-functions.html
   
    - curdate() : 'yyyy-MM-DD'
    - curtime() : 'hh:mm:ss'
    - now(), sysdate()

    - adddate()
    - date_date()
      date_sub()

    - datediff() 
    - TIMESTAMPDIFF()
    - last_day()
    - extract()
    - date_format() : 날짜를 문자열로 변환
    - str_to_date():  문자를 날짜로 변환

5. 단일행 함수: 조건처리
    - case ~ end ( ANSI )
    - if()

6. 단일행 함수: 형변환 함수
https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/cast-functions.html

   - cast()
   - convert()

##########################################################################
7. 그룹함수
https://docs.oracle.com/cd/E17952_01/mysql-8.0-en/aggregate-functions.html
 
  ==> 그룹단위로 적용됨.
     만일 명시적으로 그룹으로 묶는 작업을 안하면 자동으로 전체 레코드를 하나의 그룹으로 묶음.
  ==> 기본적으로 그룹함수는 null 제외하고 처리됨.
  ==> group by로 묶지 않는 컬럼은 select 절에 그룹함수와 같이 사용 불가.
      그룹함수와 같이 사용할려면 반드시 group by로 그룹핑해야 된다.
      예> select deptno, sum(sal) // 에러
         from emp;
     해결:
         select deptno, sum(sal)
         from emp
	 group by deptno;
    
      예> select deptno, hiredate, sum(sal)
         from emp
         group by deptno, hiredate;

  ==> where 절에는 그룹함수 사용 불가.
      having 절, order y 절에도 사용 가능
  ==> group by 표현식
      mysql: 표현식에 컬럼명|별칭|순서 모두 가능
      oracle: 별칭|순서 사용 불가

  1) 종류
     sum(컬럼)
     avg(컬럼)
     max(컬럼)
     min(컬럼)
     count(컬럼|*) : 레코드 갯수
                  : count(*) 는 null 여부와 무관하게 전체 레코드 갯수를 반환함.

  2) 명시적으로 그룹으로 묶는 방법
  
    문법: 
        group by 표현식, 표현식   // 다중그룹
	
	mysql: 표현식에 컬럼명|별칭|순서 모두 가능
	oracle: 별칭|순서 사용 불가

     select  sum(sal), 그룹함수  // 4번
     from        // 1번
     where       // 2번
     group by deptno    // 3번 부서별
     order by        ;  // 5번

  3) 그룹에 대한 필터링

     select  sum(sal), 그룹함수  // 5번
     from        // 1번
     where 조건식  // 2번: 1번에 대한 필터링
     group by deptno // 3번 부서별
     having 조건식     // 4번: 3번에 대한 필터링
     order by        ;  // 6번